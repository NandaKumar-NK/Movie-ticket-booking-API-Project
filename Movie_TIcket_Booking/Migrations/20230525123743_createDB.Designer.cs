// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Movie_TIcket_Booking.Models;

#nullable disable

namespace Movie_TIcket_Booking.Migrations
{
    [DbContext(typeof(MovieTicketContext))]
    [Migration("20230525123743_createDB")]
    partial class createDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Movie_TIcket_Booking.Models.BookingDeatils", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"));

                    b.Property<DateTime?>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Fare")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("MovieDetailsMovieId")
                        .HasColumnType("int");

                    b.Property<int?>("ScreenDetailsScreenId")
                        .HasColumnType("int");

                    b.Property<int?>("SeatAllocatioonSeatNo")
                        .HasColumnType("int");

                    b.Property<int?>("UserRegisterUserId")
                        .HasColumnType("int");

                    b.HasKey("BookingId");

                    b.HasIndex("MovieDetailsMovieId");

                    b.HasIndex("ScreenDetailsScreenId");

                    b.HasIndex("SeatAllocatioonSeatNo");

                    b.HasIndex("UserRegisterUserId");

                    b.ToTable("BookingDeatil");
                });

            modelBuilder.Entity("Movie_TIcket_Booking.Models.MovieDetails", b =>
                {
                    b.Property<int>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MovieId"));

                    b.Property<string>("MovieDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovieTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.HasKey("MovieId");

                    b.ToTable("MovieDetail");
                });

            modelBuilder.Entity("Movie_TIcket_Booking.Models.ScreenDetails", b =>
                {
                    b.Property<int>("ScreenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScreenId"));

                    b.Property<int?>("MovieDetailsMovieId")
                        .HasColumnType("int");

                    b.Property<string>("ScreenName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TotalSeatCount")
                        .HasColumnType("int");

                    b.HasKey("ScreenId");

                    b.HasIndex("MovieDetailsMovieId");

                    b.ToTable("ScreenDetail");
                });

            modelBuilder.Entity("Movie_TIcket_Booking.Models.SeatAllocation", b =>
                {
                    b.Property<int>("SeatNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeatNo"));

                    b.Property<int?>("ScreenDetailsScreenId")
                        .HasColumnType("int");

                    b.Property<string>("SeatStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ShowTime")
                        .HasColumnType("datetime2");

                    b.HasKey("SeatNo");

                    b.HasIndex("ScreenDetailsScreenId");

                    b.ToTable("SeatAllocation");
                });

            modelBuilder.Entity("Movie_TIcket_Booking.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Movie_TIcket_Booking.Models.UserRegister", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("userRegister");
                });

            modelBuilder.Entity("Movie_TIcket_Booking.Models.BookingDeatils", b =>
                {
                    b.HasOne("Movie_TIcket_Booking.Models.MovieDetails", "MovieDetails")
                        .WithMany("Deatils")
                        .HasForeignKey("MovieDetailsMovieId");

                    b.HasOne("Movie_TIcket_Booking.Models.ScreenDetails", "ScreenDetails")
                        .WithMany()
                        .HasForeignKey("ScreenDetailsScreenId");

                    b.HasOne("Movie_TIcket_Booking.Models.SeatAllocation", "SeatAllocatioon")
                        .WithMany("BookingDeatil")
                        .HasForeignKey("SeatAllocatioonSeatNo");

                    b.HasOne("Movie_TIcket_Booking.Models.UserRegister", "UserRegister")
                        .WithMany("BookingDeatil")
                        .HasForeignKey("UserRegisterUserId");

                    b.Navigation("MovieDetails");

                    b.Navigation("ScreenDetails");

                    b.Navigation("SeatAllocatioon");

                    b.Navigation("UserRegister");
                });

            modelBuilder.Entity("Movie_TIcket_Booking.Models.ScreenDetails", b =>
                {
                    b.HasOne("Movie_TIcket_Booking.Models.MovieDetails", "MovieDetails")
                        .WithMany("ScreenDetails")
                        .HasForeignKey("MovieDetailsMovieId");

                    b.Navigation("MovieDetails");
                });

            modelBuilder.Entity("Movie_TIcket_Booking.Models.SeatAllocation", b =>
                {
                    b.HasOne("Movie_TIcket_Booking.Models.ScreenDetails", "ScreenDetails")
                        .WithMany("SeatAllocatioons")
                        .HasForeignKey("ScreenDetailsScreenId");

                    b.Navigation("ScreenDetails");
                });

            modelBuilder.Entity("Movie_TIcket_Booking.Models.MovieDetails", b =>
                {
                    b.Navigation("Deatils");

                    b.Navigation("ScreenDetails");
                });

            modelBuilder.Entity("Movie_TIcket_Booking.Models.ScreenDetails", b =>
                {
                    b.Navigation("SeatAllocatioons");
                });

            modelBuilder.Entity("Movie_TIcket_Booking.Models.SeatAllocation", b =>
                {
                    b.Navigation("BookingDeatil");
                });

            modelBuilder.Entity("Movie_TIcket_Booking.Models.UserRegister", b =>
                {
                    b.Navigation("BookingDeatil");
                });
#pragma warning restore 612, 618
        }
    }
}
